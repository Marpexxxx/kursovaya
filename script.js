// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
const difficultySettings = {
    easy: { rows: 9, cols: 9, mines: 10 },
    medium: { rows: 16, cols: 16, mines: 40 },
    hard: { rows: 16, cols: 30, mines: 99 }
  };
  
  
  // –≠–ª–µ–º–µ–Ω—Ç—ã DOM
  const difficultySelect = document.getElementById('difficulty');
  const newGameBtn = document.getElementById('new-game');
  const boardElement = document.getElementById('board');
  const infoElement = document.getElementById('info');
  const explosionSound = document.getElementById('explosion-sound'); // —ç–ª–µ–º–µ–Ω—Ç –∑–≤—É–∫–∞ –±–æ–º–±—ã
  const winModal = document.getElementById('win-modal');
  const loseModal = document.getElementById('lose-modal');
  const playAgainWin = document.getElementById('play-again-win');
  const playAgainLose = document.getElementById('play-again-lose');
  // –ò–≥—Ä–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
  let board = [];
  let rows, cols, mines;
  let revealedCount = 0;
  let flaggedCount = 0;
  let gameOver = false;
  let seconds = 0;
let timerInterval;
let gameStartTime;
let timeLeft;
let maxTime;

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã
  function initGame() {
    const difficulty = difficultySelect.value;
    rows = difficultySettings[difficulty].rows;
    cols = difficultySettings[difficulty].cols;
    mines = difficultySettings[difficulty].mines;
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    switch(difficulty) {
        case 'easy':
            maxTime = 120; // 2 –º–∏–Ω—É—Ç—ã
            break;
        case 'medium':
            maxTime = 210; // 3.5 –º–∏–Ω—É—Ç—ã
            break;
        case 'hard':
            maxTime = 300; // 5 –º–∏–Ω—É—Ç
            break;
    }
    timeLeft = maxTime;
    
    stopTimer(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–∏ –Ω–æ–≤–æ–π –∏–≥—Ä–µ
    updateTimerDisplay();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–ª–∞–≥–æ–≤
    let maxFlags = mines;
    
    board = Array(rows).fill().map(() => Array(cols).fill(0));
    revealedCount = 0;
    flaggedCount = 0;
    gameOver = false;
    
    winModal.style.display = 'none';
    loseModal.style.display = 'none';
    
    renderBoard();
    infoElement.textContent = `–§–ª–∞–≥–æ–≤: ${flaggedCount}/${mines}`;
}
  
  // –†–∞–∑–º–µ—â–µ–Ω–∏–µ –º–∏–Ω
  function placeMines(firstClickRow, firstClickCol) {
    let minesPlaced = 0;
    
    // –°–æ–∑–¥–∞–µ–º –∑–æ–Ω—É –≤–æ–∫—Ä—É–≥ –ø–µ—Ä–≤–æ–≥–æ –∫–ª–∏–∫–∞, –≥–¥–µ –Ω–µ –±—É–¥–µ—Ç –º–∏–Ω
    const safeZone = [];
    for (let r = Math.max(0, firstClickRow - 1); r <= Math.min(rows - 1, firstClickRow + 1); r++) {
        for (let c = Math.max(0, firstClickCol - 1); c <= Math.min(cols - 1, firstClickCol + 1); c++) {
            safeZone.push(`${r},${c}`);
        }
    }
    
    while (minesPlaced < mines) {
        const row = Math.floor(Math.random() * rows);
        const col = Math.floor(Math.random() * cols);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–¥–µ—Å—å –Ω–µ—Ç –º–∏–Ω—ã –∏ —ç—Ç–æ –Ω–µ –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–æ–Ω–∞
        if (board[row][col] !== -1 && !safeZone.includes(`${row},${col}`)) {
            board[row][col] = -1; // -1 –æ–∑–Ω–∞—á–∞–µ—Ç –º–∏–Ω—É
            minesPlaced++;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –º–∏–Ω —É —Å–æ—Å–µ–¥–Ω–∏—Ö –∫–ª–µ—Ç–æ–∫
            for (let r = Math.max(0, row - 1); r <= Math.min(rows - 1, row + 1); r++) {
                for (let c = Math.max(0, col - 1); c <= Math.min(cols - 1, col + 1); c++) {
                    if (board[r][c] !== -1) {
                        board[r][c]++;
                    }
                }
            }
        }
    }
  }
  
  // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
  function renderBoard() {
    boardElement.innerHTML = '';
    boardElement.style.gridTemplateColumns = `repeat(${cols}, 30px)`;
    
    for (let row = 0; row < rows; row++) {
        for (let col = 0; col < cols; col++) {
            const cell = document.createElement('div');
            cell.className = 'cell';
            cell.dataset.row = row;
            cell.dataset.col = col;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            cell.addEventListener('click', () => handleCellClick(row, col));
            cell.addEventListener('contextmenu', (e) => {
                e.preventDefault();
                handleRightClick(row, col);
            });
            
            boardElement.appendChild(cell);
        }
    }
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–ª–µ—Ç–∫–µ
  function handleCellClick(row, col) {
    if (gameOver) return;
    if (revealedCount === 0) {
        startTimer();
        placeMines(row, col);
    }
    
    const cell = getCellElement(row, col);
    if (!cell || cell.classList.contains('revealed') || cell.classList.contains('flagged')) {
        return;
    }
    
    // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∫–ª–∏–∫, —Ä–∞–∑–º–µ—â–∞–µ–º –º–∏–Ω—ã
    if (revealedCount === 0) {
        placeMines(row, col);
    }
     // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–∞–∂–µ–Ω–∏–µ
     if (board[row][col] === -1) {
      cell.classList.add('mine');
      stopTimer();
      document.getElementById('lose-time').textContent = seconds;
      cell.textContent = 'üí£';
      gameOver = true;
    
    
      // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –≤–∑—Ä—ã–≤–∞
      explosionSound.currentTime = 0; // –ü–µ—Ä–µ–º–∞—Ç—ã–≤–∞–µ–º –Ω–∞ –Ω–∞—á–∞–ª–æ
      explosionSound.play().catch(e => console.log("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∑–≤—É–∫:", e));
      revealAllMines();
      infoElement.textContent = '–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.';
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ—Ä–∞–∂–µ–Ω–∏—è
        loseModal.style.display = 'flex';
        return;
    }
     
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–ª–µ—Ç–∫—É
    revealCell(row, col);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–±–µ–¥—É
    if (revealedCount === rows * cols - mines) {
        gameOver = true;
        stopTimer();
        document.getElementById('win-time').textContent = seconds;
        infoElement.textContent = '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–±–µ–¥–∏–ª–∏!';
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–±–µ–¥—ã
          winModal.style.display = 'flex';
      }
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∞–≤–æ–≥–æ –∫–ª–∏–∫–∞ (—É—Å—Ç–∞–Ω–æ–≤–∫–∞/—Å–Ω—è—Ç–∏–µ —Ñ–ª–∞–≥–∞)
  function handleRightClick(row, col) {
    if (gameOver) return;
    
    const cell = getCellElement(row, col);
    if (!cell || cell.classList.contains('revealed')) {
        return;
    }
    const difficulty = difficultySelect.value;
    let maxFlags;
    switch(difficulty) {
        case 'easy':
            maxFlags = 10;
            break;
        case 'medium':
            maxFlags = 40;
            break;
        case 'hard':
            maxFlags = 99;
            break;
        default:
            maxFlags = 10;
    }
    
    
    if (cell.classList.contains('flagged')) {
        cell.classList.remove('flagged');
        cell.textContent = '';
        flaggedCount--;
    } else {
        if (flaggedCount >= maxFlags) {
            infoElement.textContent = `–õ–∏–º–∏—Ç —Ñ–ª–∞–≥–æ–≤: ${maxFlags}!`;
            infoElement.classList.add('limit-warning');
            setTimeout(() => infoElement.classList.remove('limit-warning'), 1500);
            return;
        }
        cell.classList.add('flagged');
        cell.textContent = 'üö©';
        flaggedCount++;
    }
    
    infoElement.textContent = `–§–ª–∞–≥–æ–≤: ${flaggedCount}/${mines}`;
  }

  
function startTimer() {
    timeLeft = maxTime;
    updateTimerDisplay();
    timerInterval = setInterval(updateTimer, 1000);
}
function updateTimer() {
    timeLeft--;
    updateTimerDisplay();
    if (timeLeft <= 30) {
        document.getElementById('timer').classList.add('warning');
    } else {
        document.getElementById('timer').classList.remove('warning');
    }
    
    if (timeLeft <= 0) {
        stopTimer();
        gameOver = true;
        infoElement.textContent = '–í—Ä–µ–º—è –≤—ã—à–ª–æ! –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.';
        revealAllMines();
        document.getElementById('lose-time').textContent = maxTime;
        loseModal.style.display = 'flex';
    }
}

function updateTimerDisplay() {
    const minutes = Math.floor(timeLeft / 60);
    const seconds = timeLeft % 60;
    document.getElementById('timer').textContent = `–í—Ä–µ–º—è: ${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;
}

function stopTimer() {
    clearInterval(timerInterval);
}

  // –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–ª–µ—Ç–∫–∏
  function revealCell(row, col) {
    const cell = getCellElement(row, col);
    if (!cell || cell.classList.contains('revealed') || cell.classList.contains('flagged')) {
        return;
    }
    
    cell.classList.add('revealed');
    revealedCount++;
    
    if (board[row][col] > 0) {
        cell.textContent = board[row][col];
        cell.classList.add(`mines-count-${board[row][col]}`);
    } else if (board[row][col] === 0) {
        // –ï—Å–ª–∏ –ø—É—Å—Ç–∞—è –∫–ª–µ—Ç–∫–∞, –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ—Å–µ–¥–µ–π —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
        for (let r = Math.max(0, row - 1); r <= Math.min(rows - 1, row + 1); r++) {
            for (let c = Math.max(0, col - 1); c <= Math.min(cols - 1, col + 1); c++) {
                if (r !== row || c !== col) {
                    revealCell(r, c);
                }
            }
        }
    }
  }
  
  // –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –º–∏–Ω—ã –ø—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ
  function revealAllMines() {
    for (let row = 0; row < rows; row++) {
        for (let col = 0; col < cols; col++) {
            if (board[row][col] === -1) {
                const cell = getCellElement(row, col);
                if (cell && !cell.classList.contains('flagged')) {
                    cell.classList.add('mine');
                    cell.textContent = 'üí£';
                }
            }
        }
    }
  }
  
  // –ü–æ–ª—É—á–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –∫–ª–µ—Ç–∫–∏ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
  function getCellElement(row, col) {
    return document.querySelector(`.cell[data-row="${row}"][data-col="${col}"]`);
  }
  
  // –ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
  newGameBtn.addEventListener('click', initGame);
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–≤–æ–π –∏–≥—Ä—ã
  document.addEventListener('DOMContentLoaded', initGame);
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ "–ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞"
  playAgainWin.addEventListener('click', initGame);
  playAgainLose.addEventListener('click', initGame);
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–≤–æ–π –∏–≥—Ä—ã
  document.addEventListener('DOMContentLoaded', initGame);